public class MergeSortedArrays {
    public static void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m - 1; // Index of last element in nums1
        int j = n - 1; // Index of last element in nums2
        int k = m + n - 1; // Index of last position in merged array

        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // If there are remaining elements in nums2
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 2, 3, 0, 0, 0};
        int m = 3;
        int[] nums2 = {2, 5, 6};
        int n = 3;

        merge(nums1, m, nums2, n);

        // Print the merged array
        for (int num : nums1) {
            System.out.print(num + " ");
        }
    }
}

int i = m - 1;, int j = n - 1;, and int k = m + n - 1;: Initialize three pointers, i pointing to the last element in nums1, j pointing to the last element in nums2, and k pointing to the last available position in the merged array.

while (i >= 0 && j >= 0) {: This loop continues until either of the arrays is exhausted.

Inside the loop:

if (nums1[i] > nums2[j]) { nums1[k--] = nums1[i--]; }: If the current element in nums1 is greater, place it at the end of the merged array and decrement both i and k.
else { nums1[k--] = nums2[j--]; }: If the current element in nums2 is greater or equal, place it at the end of the merged array and decrement both j and k.
while (j >= 0) { nums1[k--] = nums2[j--]; }: If there are remaining elements in nums2, copy them to the merged array.
